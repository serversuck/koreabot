#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from turtle import turtlesize
import rospy, roslaunch, os
from enum import Enum
from std_msgs.msg import UInt8
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('koreabot/nodes', 'koreabot/')

        # Subscriber
        self.sub_mission = rospy.Subscriber('/mission', UInt8, self.cbReceiveMode, queue_size=1)
        self.Mission = Enum('Mission', 'Testrun Traffic Intersection Construction Parking LevelCrossing Tunnel')

        self.is_triggered = False
        # self.current_mode = self.Mission.Idle.value
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        self.Launcher = Enum('Launcher', 'DetectLane ControlLane Traffic Intersection Construction Parking LevelCrossing Tunnel')
        

        self.launch_DetectLane = roslaunch.scriptapi.ROSLaunch()
        self.launch_DetectLane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/detect_lane.launch"])
        self.launch_ControlLane = roslaunch.scriptapi.ROSLaunch()
        self.launch_ControlLane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/control_lane.launch"])
  
        self.launch_Tunnel = roslaunch.scriptapi.ROSLaunch()
        self.launch_Tunnel = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/detect_tunnel.launch"])
        self.launch_rviz = roslaunch.scriptapi.ROSLaunch()
        self.launch_rviz = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/rviz.launch"])
  

        self.launch_Traffic = roslaunch.scriptapi.ROSLaunch()
        self.launch_Traffic = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/detect_traffic_light.launch"])
        
        self.launch_Intersection= roslaunch.scriptapi.ROSLaunch()
        self.launch_Intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "launch/detect_intersection.launch"])
        


        loop_rate = rospy.Rate(10) # 10hz

        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        
        self.current_mode = mode_msg.data
        self.is_triggered = True

    def fnControlNode(self):
        if self.current_mode == self.Mission.Testrun.value:
            rospy.loginfo(f" Mission Traffic begin")
            self.launch_DetectLane.start()
            self.launch_ControlLane.start()
        
        elif self.current_mode == self.Mission.Intersection.value:
            rospy.loginfo(f" Mission Intersection begin")
            self.launch_DetectLane.start()
            self.launch_ControlLane.start()
            self.launch_Intersection.start()
            

        elif self.current_mode == self.Mission.Tunnel.value:
            rospy.loginfo(f" Mission Tunnel begin")
            self.launch_DetectLane.shutdown()
            self.launch_ControlLane.shutdown()
            self.launch_Traffic.shutdown()
            
            self.launch_Tunnel.start()
            self.launch_rviz.start()
            



        

        self.is_triggered = False

    
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()