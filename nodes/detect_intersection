#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import cv2
import numpy as np
import rospy , math
from sensor_msgs.msg import CompressedImage
from nav_msgs.msg import Odometry
from std_msgs.msg import Bool, String
from ultralytics import YOLO
import tf.transformations as tft



class IntersectionWatcher:
    def __init__(self):
        rospy.init_node("intersection_watcher", anonymous=False)

        # --- Params ---
        self.model_path   = rospy.get_param("~model_path", "/home/vcs/catkin_ws/src/koreabot/yolo/best.onnx")
        self.image_topic  = rospy.get_param("~image_topic", "/usb_cam/image_raw/compressed")
        self.odom_topic   = rospy.get_param("~odom_topic", "/odom")
        self.toggle_topic = rospy.get_param("~toggle_topic", "/detect/lane_toggle")
        self.sign_topic   = rospy.get_param("~sign_topic", "/sign_name")
        self.target_sign  = rospy.get_param("~target_sign", "parking")
        self.conf_th      = float(rospy.get_param("~conf_th", 0.70))

        # class id -> name (ปรับตามโมเดล Aj)
        id2name = rospy.get_param("~id2name", {"0": "left", "1": "parking", "2": "right", "3": "intersection"})
        self.id2name = {int(k): v for k, v in id2name.items()}

        # เกณฑ์การหมุน
        self.turn_w_min = float(rospy.get_param("~turn_w_min", 0.4))  # rad/s
        self.use_abs_w  = bool(rospy.get_param("~use_abs_w", True))
        self.quat_w_min = float(rospy.get_param("~quat_w_min", 0.2))
        self.quat_w_max = float(rospy.get_param("~quat_w_max", 0.55))
        self.use_abs_quat_w = bool(rospy.get_param("~use_abs_quat_w", True))  # ใช้ |w| ดีสุดกันเคส w<0
        self.cooldown = rospy.Duration(rospy.get_param("~cooldown_s", 0.5))   # ถ้าเคยมีอยู่แล้ว ไม่ต้องเพิ่มซ้ำ


        # --- Runtime state ---
        self.model = YOLO(self.model_path)
        self.armed = False
        self.last_w_fire_time = rospy.Time(0)
        self.last_theta = None      
        self.last_time = None


        # --- Pub/Sub ---
        self.pub_toggle = rospy.Publisher(self.toggle_topic, Bool, queue_size=1)
        self.pub_sign   = rospy.Publisher(self.sign_topic,   String, queue_size=1)
        rospy.Subscriber(self.image_topic, CompressedImage, self.cb_image, queue_size=1)
        rospy.Subscriber(self.odom_topic,  Odometry,        self.cb_odom,  queue_size=20)

        rospy.loginfo("IntersectionWatcher ready. target_sign='%s'", self.target_sign)

    # ---------------- Image callback: detect sign ----------------
    def cb_image(self, msg: CompressedImage):
        frame = cv2.imdecode(np.frombuffer(msg.data, np.uint8), cv2.IMREAD_COLOR)
        if frame is None:
            return

        res = self.model(frame, verbose=False)[0]

        for b in res.boxes:
            conf = float(b.conf.item() if hasattr(b.conf, "item") else b.conf)
            if conf < self.conf_th:
                continue

            cls_id = int(b.cls.item() if hasattr(b.cls, "item") else b.cls)
            cls_name = self.id2name.get(cls_id, "unknown")
            if cls_name != self.target_sign:
                continue

            if self.armed:
                continue

            # Arm หลังพบป้ายเป้าหมาย
            self.armed = True
            self.pub_sign.publish(String(self.target_sign))
            rospy.loginfo("Detected '%s' (conf=%.2f). Arm turning check.",
                          self.target_sign, conf)
            break

    # ---------------- Odom callback: check turning ----------------
    def cb_odom(self, msg: Odometry):
        if not self.armed:
            return

        # อ่าน quaternion.w จาก odom.pose.pose.orientation.w
        q = msg.pose.pose.orientation
        wq = abs(q.w) if self.use_abs_quat_w else q.w

        # ถ้า w อยู่ในช่วง [min, max] -> toggle FALSE (พร้อม cooldown)
        if (self.quat_w_min <= wq <= self.quat_w_max) and \
        ((rospy.Time.now() - self.last_w_fire_time) > self.cooldown):
            self.pub_toggle.publish(Bool(False))
            self.last_w_fire_time = rospy.Time.now()
            rospy.logwarn("quat.w in [%.2f, %.2f]: w=%.3f -> toggle FALSE to %s",
                        self.quat_w_min, self.quat_w_max, wq, self.toggle_topic)
            # กันยิงรัว ๆ รอบเดียวพอ
            self.armed = False





if __name__ == "__main__":
    try:
        node = IntersectionWatcher()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
